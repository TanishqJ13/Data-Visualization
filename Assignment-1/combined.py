{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-09-03T08:43:27.385742Z\",\"iopub.execute_input\":\"2021-09-03T08:43:27.386082Z\",\"iopub.status.idle\":\"2021-09-03T08:43:27.391149Z\",\"shell.execute_reply.started\":\"2021-09-03T08:43:27.386049Z\",\"shell.execute_reply\":\"2021-09-03T08:43:27.389877Z\"}}\nimport os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-09-03T08:43:27.396596Z\",\"iopub.execute_input\":\"2021-09-03T08:43:27.397034Z\",\"iopub.status.idle\":\"2021-09-03T10:45:53.005012Z\",\"shell.execute_reply.started\":\"2021-09-03T08:43:27.396940Z\",\"shell.execute_reply\":\"2021-09-03T10:45:53.003887Z\"}}\nfor i in range(200):\n\n    time_stamp = str(i).zfill(4)\n    \n    file = '../input/dv-data-1/velocity.' + time_stamp + '.txt'\n    \n    if not os.path.isfile(file):\n        continue\n    \n    #reading data\n    data_file = pd.read_csv(file,delimiter=' ',header=None)\n    data_file = np.array(data_file)\n    \n    #Initialize and define velocity vector\n    velocity = np.zeros((600,248,248,3))\n    \n    temp1 = 0\n    for k in range(248):\n        for j in range (248):\n            for x in range(600):\n                velocity[x][j][k][2] = data_file[temp1][2]\n                velocity[x][j][k][1] = data_file[temp1][1]\n                velocity[x][j][k][0] = data_file[temp1][0]\n                temp1 = temp1 +1\n    \n    #Utilizing velocity curl AS MOENTIONED ON WEBSITE\n    velocity_curl = np.zeros((36902400, 3)) # 248*248*600 = 36902400\n    \n    temp2 = -1\n    \n    for k in range(248):\n        for j in range(248):\n            for x in range(600):\n                temp2 = temp2 + 1\n                if  x == 599 or j == 247 or k == 247 :\n                    continue\n                else:                    \n                    velocity_curl[temp2][0] = ( velocity[x][j+1][k][2] - velocity[x][j][k][2] - velocity[x][j][k+1][1] + velocity[x][j][k][1] ) / 0.001\n                    velocity_curl[temp2][1] = ( velocity[x][j][k+1][0] - velocity[x][j][k][0] - velocity[x+1][j][k][2] + velocity[x][j][k][2] ) / 0.001\n                    velocity_curl[temp2][2] = ( velocity[x+1][j][k][1] - velocity[x][j][k][1] - velocity[x][j+1][k][0] + velocity[x][j][k][0] ) / 0.001\n    \n    #Using the below value as data available for it            \n    z=124\n    velocity_curl = velocity_curl [z*600*248 : (z+1)*600*248]\n\n    curl_i = np.array(velocity_curl[:,0]).reshape(248,600)\n    curl_j = np.array(velocity_curl[:,1]).reshape(248,600)\n    curl_k = np.array(velocity_curl[:,2]).reshape(248,600)\n    \n    #plotting figure\n\n    \n    \n    fig = plt.figure(figsize=(30,10))\n    \n    file = str(time_stamp).zfill(4)#As the file numbers in the data are in the form 0000 to 0199. \n    data_files = pd.read_csv('../input/data-vis/multifield.'+ file + '.zslice.txt', delimiter=' ',header=None)\n    total_partical_density = data_files[0].values #Selecting first scalar value to visualize to be density\n    temp = total_partical_density.reshape(248,600) #Keeping z constant and visualizing in X-Y Plane\n    plt.contourf(temp, cmap='plasma')   \n    plt.colorbar()\n    plt.quiver(np.arange(600), np.arange(248), curl_i, curl_j, scale=10000.0 , scale_units='width', width=1e-3)\n    plt.title(\"Velocity vector quiver plot visualization\")\n    \n    file = time_stamp + '.jpg'\n    plt.savefig(file)\n    plt.show()\n    \n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-09-03T11:04:44.809885Z\",\"iopub.execute_input\":\"2021-09-03T11:04:44.810309Z\",\"iopub.status.idle\":\"2021-09-03T11:04:45.709180Z\",\"shell.execute_reply.started\":\"2021-09-03T11:04:44.810254Z\",\"shell.execute_reply\":\"2021-09-03T11:04:45.708401Z\"}}\nfrom PIL import Image\ngrid = []\n\nfor i in range(200):\n\n    time_stamp = str(i).zfill(4)\n    file = time_stamp + '.jpg'\n    if not os.path.isfile(file):\n        continue\n    \n    img = Image.open(file)\n    grid.append(img)\n    \ngrid[0].save('vector.gif',format=\"GIF\",append_images=grid[1:], save_all=True, duration=150, loop=0)","metadata":{"_uuid":"d3675818-3935-4ef3-ae46-fbc5df9dad47","_cell_guid":"222f1805-8f64-4c5d-b437-4ab74867923d","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}